{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [],
  "mappings": "AAAA,IAAI,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;;;AAGjC,EAAE,CAAC,KAAK,CAAC;AACL,eAAS,EAAE,CAAC,SAAS;;AAErB,UAAM,EAAE,kBAAU;AACd,YAAI,CAAC,SAAS,GAAG,CAAC,CAAC;AACnB,YAAI,CAAC,UAAU,GAAG,CAAC,CAAC;AACpB,YAAI,CAAC,YAAY,GAAG,CAAC,CAAC;KACzB;;AAED,YAAQ,EAAE,oBAAY;;;AAElB,YAAI,CAAC,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC;KAIvD;;;AAGD,oBAAgB,EAAE,0BAAS,KAAK,EAAE,IAAI,EAAE;;AAEpC,YAAG,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,eAAe,EAAC;;AACpC,gBAAI,iBAAiB,GAAG,KAAK,CAAC,YAAY,CAAC,mBAAmB,CAAC,CAAC;;AAEhE,cAAE,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,GAAG,GAAG,CAAC;AAC9C,gBAAI,CAAC,UAAU,GAAG,CAAC,CAAC;;;AAGpB,gBAAG,EAAE,CAAC,UAAU,EAAE,IAAI,iBAAiB,CAAC,QAAQ,EAAC;;AAE7C,oBAAI,aAAa,GAAG,QAAQ,CAAC,OAAO,CAAC,YAAY,EAAE,GAAG,iBAAiB,CAAC,MAAM,GAAG,iBAAiB,CAAC,SAAS,CAAC,CAAC;AAC9G,oBAAI,CAAC,WAAW,CAAC,SAAS,IAAI,aAAa,CAAC;;AAE5C,oBAAI,CAAC,YAAY,GAAG,CAAC,CAAC;AACtB,oBAAI,IAAI,GAAG,EAAE,CAAC,IAAI,CAAC,mBAAmB,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;AACnD,oBAAI,CAAC,OAAO,GAAG,GAAG,CAAC;AACnB,oBAAI,CAAC,YAAY,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,MAAM,GAAG,GAAG,GAAG,aAAa,CAAC;AACzD,oBAAI,CAAC,WAAW,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;AAC3B,oBAAI,CAAC,SAAS,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;aAE1C,MAAM;;AAEH,oBAAI,cAAc,GAAG,QAAQ,CAAC,OAAO,CAAC,YAAY,EAAE,GAAG,iBAAiB,CAAC,MAAM,CAAC,CAAC;AACjF,oBAAI,CAAC,WAAW,CAAC,SAAS,IAAI,cAAc,CAAC;aAChD;SAGJ;KAGJ;;AAED,UAAM,EAAE,gBAAU,EAAE,EAAE;;AAElB,YAAI,CAAC,UAAU,IAAI,EAAE,CAAC;AACtB,YAAG,IAAI,CAAC,UAAU,IAAI,CAAC,EAAC;AACpB,cAAE,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,GAAG,CAAC,CAAC;SAC/C;;AAED,YAAI,CAAC,YAAY,IAAI,EAAE,CAAC;AACxB,YAAG,IAAI,CAAC,YAAY,IAAI,CAAC,EAAC;AACtB,cAAE,CAAC,IAAI,CAAC,mBAAmB,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,GAAG,CAAC,CAAC;SACvD;KAEJ;CACJ,CAAC,CAAC",
  "file": "unknown",
  "sourcesContent": [
    "var allData = require('allData');//引用所有公共数据\r\n//处理碰撞,及碰撞之后所有信息\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    onLoad: function(){\r\n        this.Collision = 0;\r\n        this.hpShowTime = 0;\r\n        this.critShowTime = 0;\r\n    },\r\n\r\n    onEnable: function () {//统一用onEnable初始化，重新激活时此函数也会调用\r\n        //所有小怪物节点下的脚本都引用 monsterData 数据\r\n        this.monsterData = this.getComponent('monsterData');\r\n            \r\n       \r\n\r\n    },\r\n\r\n    //处理其他节点跟本节点的碰撞\r\n    onCollisionEnter: function(other, self) {\r\n        //对碰撞情况进行划分\r\n        if(other.node.group === 'heroBallistic'){//被hero子弹击中\r\n            var heroBallisticData = other.getComponent('heroBallisticData');\r\n            //血条显现2秒\r\n            cc.find('monsterHp', this.node).opacity = 255;\r\n            this.hpShowTime = 2;\r\n\r\n            //判断是否暴击\r\n            if(cc.random0To1() <= heroBallisticData.critProb){\r\n                //monster暴击掉血\r\n                var monsterCrited = parseInt(allData.randomNormal() * heroBallisticData.damage * heroBallisticData.critTimes);\r\n                this.monsterData.currentHp -= monsterCrited;\r\n                //monster节点的状态显示栏显现，一个移动的红色暴击伤害出现在头顶，持续2秒\r\n                this.critShowTime = 2;\r\n                var crit = cc.find('monsterState/crit', this.node);\r\n                crit.opacity = 255;\r\n                crit.getComponent(cc.Label).string = '-' + monsterCrited;\r\n                crit.setPosition(-20, -40);\r\n                crit.runAction(cc.moveTo(2, -40, -20));\r\n                \r\n            } else {\r\n                //monster普通掉血\r\n                var monsterDamaged = parseInt(allData.randomNormal() * heroBallisticData.damage);\r\n                this.monsterData.currentHp -= monsterDamaged;\r\n            }\r\n            \r\n           \r\n        }\r\n\r\n\r\n    }, \r\n\r\n    update: function (dt) {\r\n        //血条显现2秒\r\n        this.hpShowTime -= dt;\r\n        if(this.hpShowTime <= 0){\r\n            cc.find('monsterHp', this.node).opacity = 0;\r\n        }\r\n        //暴击标志显现2秒\r\n        this.critShowTime -= dt;\r\n        if(this.critShowTime <= 0){\r\n            cc.find('monsterState/crit', this.node).opacity = 0;\r\n        }\r\n\r\n    },\r\n});\r\n"
  ]
}