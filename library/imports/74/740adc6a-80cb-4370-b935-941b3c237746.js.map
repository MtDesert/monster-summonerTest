{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [],
  "mappings": "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",
  "file": "unknown",
  "sourcesContent": [
    "var allData = require('allData');//引用所有公共数据\r\n//控制小怪物在场景生成与回收的脚本，生成普通的小怪\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    onEnable: function () {//统一用onEnable初始化，重新激活时此函数也会调用\r\n        //所有Canvas节点下的脚本都引用 gameData 数据\r\n        this.gameData = this.getComponent('gameData');\r\n        //创建一个monster的节点池 this.monsterPool\r\n        this.monsterPool = new cc.NodePool();\r\n\r\n\r\n        //初始化this.monsterPool\r\n        this.monsterPoolInit();\r\n\r\n        //以一定的速率产生怪物\r\n        this.createMonsterNormal(this.gameData.normalRate);\r\n\r\n        //还有一定概率产生额外的怪物\r\n        this.createMonsterExtra(this.gameData.extraTime, this.gameData.extraProb, \r\n                               this.gameData.extraInterval, this.gameData.extraRepeat);\r\n\r\n  \r\n    },\r\n\r\n\r\n    monsterPoolInit: function(){\r\n        var monsterInitCount = 20;//默认最多20个怪物在场\r\n        for (var i = 0; i < monsterInitCount; ++i) {\r\n            var monster = cc.instantiate(this.gameData.monsterPrefab); // 创建 monster 节点\r\n            this.monsterPool.put(monster); // 通过 put 接口放入对象池\r\n        }\r\n    },\r\n\r\n    createMonster: function (parentNode) {\r\n        var monster = null;\r\n        if (this.monsterPool.size() > 0) { // 通过 size 接口判断对象池中是否有空闲的对象\r\n            monster = this.monsterPool.get();\r\n        } else { // 如果没有空闲对象，也就是对象池中备用对象不够时，就用 cc.instantiate 重新创建\r\n            monster = cc.instantiate(this.gameData.monsterPrefab);\r\n        }\r\n        monster.parent = parentNode; // 将生成的monster加入节点树\r\n        return monster; //返回monster节点，调用函数可以设置monster节点的位置\r\n    },\r\n\r\n    createMonsterNormal: function(rate){\r\n        //在屏幕最上方一定速率产生怪物:每rate秒产生一个怪物\r\n        this.schedule(function(){\r\n            var monsterNode = this.createMonster(this.node);\r\n            //随机怪物模型\r\n            var url = 'monster';\r\n            allData.randomModel(103, url, monsterNode.getChildByName('monsterBody'));\r\n            //随机设置怪物位置\r\n            monsterNode.setPosition(cc.randomMinus1To1() * (this.node.width/2 - monsterNode.width/2), (this.node.height/2 - monsterNode.height/2));\r\n        },rate);\r\n        \r\n    },\r\n\r\n    createMonsterExtra: function(time, prob, interval, repeat){\r\n        //用计时器产生额外的怪物：\r\n        //每time时间随机一个0~1的数字，如果小于产生概率 prob，\r\n        //则接下来每interval秒在场景随机位置产生一个额外的怪物，此轮产生repeat个怪物\r\n        this.schedule(function() {    \r\n            if(cc.random0To1() <= prob){\r\n                this.schedule(function() {\r\n                    var monsterNode = this.createMonster(this.node);\r\n                    //随机怪物模型\r\n                    var url = 'monster';\r\n                    allData.randomModel(103, url, monsterNode.getChildByName('monsterBody'));\r\n                    //随机设置怪物位置\r\n                    monsterNode.setPosition(cc.randomMinus1To1() * (this.node.width/2 - monsterNode.width/2), \r\n                                            cc.randomMinus1To1() * (this.node.height/2 - monsterNode.height/2)); \r\n               }, interval, repeat);\r\n            }\r\n        }, time);  \r\n    },\r\n\r\n\r\n    update: function (dt) {\r\n        \r\n    },\r\n});\r\n"
  ]
}