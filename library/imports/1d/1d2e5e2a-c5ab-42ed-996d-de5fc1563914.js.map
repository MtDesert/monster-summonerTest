{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [],
  "mappings": "AAAA,IAAI,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;;;AAGjC,EAAE,CAAC,KAAK,CAAC;AACL,eAAS,EAAE,CAAC,SAAS;;AAErB,YAAQ,EAAE,oBAAY;;;AAElB,YAAI,CAAC,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC;;;;AAKpD,YAAI,CAAC,WAAW,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,YAAY,EAAE,IAAI,IAAI,CAAC,WAAW,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,eAAe,GAAG,OAAO,CAAC,cAAc,CAAA,AAAC,CAAC,CAAC;AACvJ,YAAI,CAAC,WAAW,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;KAEvD;;AAED,UAAM,EAAE,gBAAU,EAAE,EAAE;;AAElB,YAAI,CAAC,WAAW,CAAC,SAAS,GAAG,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;;AAExG,YAAI,CAAC,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,WAAW,CAAC,CAAC,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;AAClI,YAAI,CAAC,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,GAAI,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;;AAEzJ,YAAG,IAAI,CAAC,WAAW,CAAC,SAAS,IAAI,CAAC,EAAC;;AAE/B,gBAAI,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,WAAW,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC,CAAC;;;AAKzE,cAAE,CAAC,IAAI,CAAC,oBAAoB,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,GAAG,CAAC,CAAC;AACrD,cAAE,CAAC,IAAI,CAAC,mBAAmB,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,GAAG,CAAC,CAAC;AACpD,cAAE,CAAC,IAAI,CAAC,sBAAsB,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,GAAG,CAAC,CAAC;AACvD,gBAAI,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC,OAAO,GAAG,IAAI,CAAC;AAClD,gBAAI,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,mBAAmB,CAAC,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACjF;KAEJ;CACJ,CAAC,CAAC",
  "file": "unknown",
  "sourcesContent": [
    "var allData = require('allData');//引用所有公共数据\r\n//控制小怪物血条的脚本\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    onEnable: function () {//统一用onEnable初始化，重新激活时此函数也会调用\r\n        //所有小怪物节点下的脚本都引用 monsterData 数据\r\n        this.monsterData = this.getComponent('monsterData');\r\n\r\n\r\n        //初始化：怪物最大血量随机，最大血量随着被杀的怪物数增加而变大,死一个怪加this.monsterData.hpIncreaseRatio生命上限\r\n        \r\n        this.monsterData.maxHp = Math.floor(allData.randomNormal() * (this.monsterData.maxHpInit + this.monsterData.hpIncreaseRatio * allData.killMonsterNum));\r\n        this.monsterData.currentHp = this.monsterData.maxHp;\r\n\r\n    },\r\n\r\n    update: function (dt) {\r\n        //控制currentHp范围在[0，maxHp]之间\r\n        this.monsterData.currentHp = allData.limitCurrentHp(this.monsterData.currentHp, this.monsterData.maxHp);\r\n        //血条长度，数值实时变化\r\n        this.node.getChildByName('monsterHp').getComponent(cc.ProgressBar).progress = this.monsterData.currentHp / this.monsterData.maxHp;\r\n        this.node.getChildByName('monsterHp').getChildByName('hpNum').getComponent(cc.Label).string = this.monsterData.currentHp +  '/' + this.monsterData.maxHp;\r\n        //怪物空血就销毁回收节点,杀死怪物数+1，同步更新怪物等级\r\n        if(this.monsterData.currentHp <= 0){\r\n            //向上发射怪物被杀事件\r\n            this.node.dispatchEvent(new cc.Event.EventCustom('monsterKilled', true));\r\n\r\n\r\n\r\n            //将此monster节点所有数据和脚本状态初始化并回收\r\n            cc.find('monsterState/state', this.node).opacity = 0;\r\n            cc.find('monsterState/crit', this.node).opacity = 0;\r\n            cc.find('monsterState/recovey', this.node).opacity = 0;\r\n            this.getComponent('monsterAction').enabled = true;\r\n            this.node.parent.getComponent('gameCreateMonster').monsterPool.put(this.node);\r\n        }\r\n\r\n    },\r\n});\r\n"
  ]
}