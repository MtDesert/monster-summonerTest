{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [],
  "mappings": "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",
  "file": "unknown",
  "sourcesContent": [
    "var allData = require('allData');//引用所有公共数据\r\n//控制hero行动的脚本\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    onEnable: function () {//统一用onEnable初始化，重新激活时此函数也会调用\r\n        //所有hero节点下的脚本都引用 heroData 数据\r\n        this.heroData = this.getComponent('heroData');\r\n\r\n        //注册触屏监听,根据触屏输入，判断hero当前是否移动，记录将要移动到点的位置\r\n        this.heroMoveToPosition();\r\n        \r\n        this.node.getChildByName('heroHalo').runAction(cc.repeatForever(cc.rotateBy(1, 240)));\r\n\r\n    },\r\n\r\n    heroMoveToPosition: function () {\r\n        //根据触屏输入，判断hero当前是否移动，记录将要移动到点的位置\r\n        //初始化移动点位置，移动状态\r\n        var self = this;\r\n        self.isMoving = false;\r\n        self.moveToPosition = cc.p(0, 0);\r\n        //注册触屏监听\r\n        self.heroData.canvas.on(cc.Node.EventType.TOUCH_START, function(event) {\r\n            var touches = event.getTouches();\r\n            var touchLocation = touches[0].getLocation();\r\n            self.isMoving = true;\r\n            self.moveToPosition = self.heroData.canvas.convertToNodeSpaceAR(touchLocation);\r\n        }, self.node);\r\n        self.heroData.canvas.on(cc.Node.EventType.TOUCH_MOVE, function(event) {\r\n            var touches = event.getTouches();\r\n            var touchLocation = touches[0].getLocation();\r\n            self.moveToPosition = self.heroData.canvas.convertToNodeSpaceAR(touchLocation);\r\n        }, self.node);\r\n        self.heroData.canvas.on(cc.Node.EventType.TOUCH_END, function(event) {\r\n            self.isMoving = false; //手指离开屏幕，移动停止\r\n        }, self.node);\r\n    },\r\n\r\n    update: function (dt) {\r\n        if (this.isMoving){\r\n            //记录当前位置\r\n            var oldPosition = this.node.position;\r\n            //很近距离(x和y都相差很少)就不移动，防止到达目的地后抖动\r\n            if(Math.abs(oldPosition.x - this.moveToPosition.x) > this.heroData.moveSpeed/100 || \r\n               Math.abs(oldPosition.y - this.moveToPosition.y) > this.heroData.moveSpeed/100){\r\n                //根据当前位置和目的位置计算出移动方向\r\n                var direction = cc.pNormalize(cc.pSub(this.moveToPosition, oldPosition));\r\n                //根据hero移动速度，按移动方向算出hero的新位置\r\n                var newPosition = cc.pAdd(oldPosition, cc.pMult(direction, this.heroData.moveSpeed * dt));\r\n                //根据新位置坐标实时更新hero的位置\r\n                this.node.setPosition(newPosition);\r\n            }   \r\n        }\r\n\r\n        //限制hero穿墙\r\n        allData.unThroughWalls(this.node, this.node.parent);\r\n   \r\n    },\r\n});\r\n"
  ]
}