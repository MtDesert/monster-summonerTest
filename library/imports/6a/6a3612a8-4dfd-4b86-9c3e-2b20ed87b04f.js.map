{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [],
  "mappings": "AAAA,IAAI,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;;;AAGjC,IAAI,IAAI,GAAG,CAAC,CAAC;;AAEb,EAAE,CAAC,KAAK,CAAC;AACL,eAAS,EAAE,CAAC,SAAS;;AAErB,YAAQ,EAAE,oBAAY;;;AAElB,YAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;;AAE9C,YAAI,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;AACzE,YAAI,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;;;AAG7E,UAAE,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC;;;AAG5D,UAAE,CAAC,QAAQ,CAAC,mBAAmB,EAAE,CAAC,OAAO,GAAG,IAAI,CAAC;;;AAGjD,YAAI,CAAC,IAAI,CAAC,EAAE,CAAC,eAAe,EAAE,UAAS,KAAK,EAAC;;AAEzC,mBAAO,CAAC,cAAc,EAAE,CAAC;AACzB,mBAAO,CAAC,YAAY,GAAG,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,cAAc,GAAC,EAAE,CAAC,CAAC;;AAEjE,gBAAI,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC;;AAElF,uBAAW,CAAC,MAAM,IAAI,WAAW,CAAC,mBAAmB,CAAC;;;AAGtD,gBAAI,CAAC,IAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,OAAO,CAAC,cAAc,CAAC;;;AAG7G,gBAAG,OAAO,CAAC,cAAc,GAAG,QAAQ,CAAC,gBAAgB,IAAI,CAAC,EAAC;;AAEvD,kBAAE,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;;AAE5D,wBAAQ,CAAC,KAAK,EAAE,CAAC;;AAEjB,wBAAQ,CAAC,KAAK,IAAI,QAAQ,CAAC,eAAe,CAAC;AAC3C,wBAAQ,CAAC,SAAS,IAAI,QAAQ,CAAC,eAAe,CAAC;aAElD;SACJ,EAAE,IAAI,CAAC,CAAC;KAQZ;;AAED,UAAM,EAAE,gBAAU,EAAE,EAAE,EAGrB;CACJ,CAAC,CAAC",
  "file": "unknown",
  "sourcesContent": [
    "var allData = require('allData');//引用所有公共数据\r\n//控制Canvas下面所有脚本组件的激活状态，游戏流程控制的主脚本\r\n\r\nvar game = 0;\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    onEnable: function () {//统一用onEnable初始化，重新激活时此函数也会调用\r\n        //所有Canvas节点下的脚本都引用 gameData 数据\r\n        this.gameData = this.getComponent('gameData');\r\n        //取得hero的数据脚本\r\n        var heroData = this.node.getChildByName('hero').getComponent('heroData');\r\n        var heroAttack = this.node.getChildByName('hero').getComponent('heroAttack');\r\n        \r\n        //播放背景音乐\r\n        cc.audioEngine.playEffect(this.gameData.bgmusic, true, 0.3);\r\n\r\n        //开启碰撞\r\n        cc.director.getCollisionManager().enabled = true;\r\n\r\n        //注册响应事件\r\n        this.node.on('monsterKilled', function(event){\r\n            //怪物被杀数目，怪物等级更新\r\n            allData.killMonsterNum++;\r\n            allData.monsterLevel = 1 + Math.floor(allData.killMonsterNum/10);\r\n            //取得怪物monster的数据脚本\r\n            var monsterData = this.node.getChildByName('monster').getComponent('monsterData');\r\n            //后面出现的怪物攻击增加 \r\n            monsterData.damage += monsterData.damageIncreaseRatio;\r\n\r\n            //杀怪数目的label更新\r\n            this.node.getChildByName('killMonsterNum').getComponent(cc.Label).string = 'kills:' + allData.killMonsterNum;\r\n            \r\n            //hero升级判断,每杀heroData.killNumToLevelUp个怪升1级\r\n            if(allData.killMonsterNum % heroData.killNumToLevelUp == 0){ \r\n                //播放hero升级音乐\r\n                cc.audioEngine.playEffect(this.gameData.heroLevelUp, false);\r\n                //hero升级\r\n                heroData.level++;\r\n                //生命上限和当前生命都提高\r\n                heroData.maxHp += heroData.hpIncreaseRatio;\r\n                heroData.currentHp += heroData.hpIncreaseRatio;\r\n\r\n            }\r\n        }, this);\r\n\r\n      \r\n\r\n       \r\n\r\n\r\n\r\n    },\r\n\r\n    update: function (dt) {\r\n        \r\n\r\n    },\r\n});\r\n"
  ]
}