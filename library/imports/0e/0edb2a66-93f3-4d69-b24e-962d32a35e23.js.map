{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [],
  "mappings": "AAAA,IAAI,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;;;AAGjC,EAAE,CAAC,KAAK,CAAC;AACL,eAAS,EAAE,CAAC,SAAS;;AAErB,UAAM,EAAE,kBAAU;AACd,YAAI,CAAC,MAAM,GAAG,CAAC,CAAC;KACnB;;AAED,YAAQ,EAAE,oBAAY;;;AAElB,YAAI,CAAC,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC;;AAGpD,YAAI,CAAC,MAAM,EAAE,CAAC;;;;AAKd,YAAI,CAAC,qBAAqB,GAAG,CAAA,YAAW;;AAEpC,gBAAI,WAAW,GAAG,AAAC,OAAO,CAAC,YAAY,IAAI,CAAC,GAAI,CAAC,GAAG,OAAO,CAAC,YAAY,CAAC;AACzE,gBAAI,CAAC,aAAa,CAAC,EAAE,CAAC,UAAU,EAAE,GAAG,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC,oBAAoB,CAAC,CAAC;SAC5F,CAAA,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACb,YAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,qBAAqB,EAAE,IAAI,CAAC,WAAW,CAAC,oBAAoB,CAAC,CAAC;KACpF;;AAED,iBAAa,EAAE,uBAAS,CAAC,EAAE,IAAI,EAAE;;;;;;AAM7B,YAAI,MAAM,GAAG,EAAE,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,CAAC,eAAe,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,EAAE,CAAC,eAAe,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;;AAE5H,YAAI,MAAM,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,eAAe,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,EAAE,CAAC,eAAe,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,EACnG,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,eAAe,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,EAAE,CAAC,eAAe,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,EACnG,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,eAAe,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,EAAE,CAAC,eAAe,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,EACnG,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,eAAe,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,EAAE,CAAC,eAAe,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;AACnH,YAAI,QAAQ,GAAG,EAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;;AAEzC,YAAI,MAAM,GAAG,EAAE,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,CAAC,eAAe,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,EAAE,CAAC,eAAe,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,EACnG,OAAO,CAAC,MAAM,CAAC,CAAC,EAAC,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,YAAY,CAAC,CAAC;;AAErF,YAAI,KAAK,GAAG,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC;;AAErD,YAAI,QAAQ,GAAG,EAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,GAAG,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;;;AAG7D,YAAI,CAAC,IAAI,CAAC,EAAE;;AACR,gBAAI,CAAC,WAAW,CAAC,YAAY,GAAG,CAAC,CAAC;AAClC,mBAAO,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;SACtC,MAAM,IAAG,CAAC,IAAI,CAAC,EAAC;;AACb,gBAAI,CAAC,WAAW,CAAC,YAAY,GAAG,CAAC,CAAC;AAClC,mBAAO,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;SACxC,MAAM,IAAG,CAAC,IAAG,CAAC,EAAC;;AACZ,gBAAI,CAAC,WAAW,CAAC,YAAY,GAAG,CAAC,CAAC;AAClC,mBAAO,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;SACtC,MAAM,IAAG,CAAC,IAAG,CAAC,EAAC;;AACZ,gBAAI,CAAC,WAAW,CAAC,YAAY,GAAG,CAAC,CAAC;AAClC,mBAAO,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;SACnE,MAAM;;AACH,gBAAI,CAAC,WAAW,CAAC,YAAY,GAAG,CAAC,CAAC;AAClC,mBAAO,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;SACtE;KACJ;;AAED,UAAM,EAAE,gBAAU,EAAE,EAAE;;AAElB,YAAG,OAAO,CAAC,YAAY,GAAG,CAAC,EAAC;AACxB,mBAAO,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SACvD,MAAM;AACH,mBAAO,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SACrD;KACJ;;AAED,aAAS,EAAE,qBAAU,EAGpB;;CAGJ,CAAC,CAAC",
  "file": "unknown",
  "sourcesContent": [
    "var allData = require('allData');//引用所有公共数据\r\n//控制小怪物行动的脚本\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    onLoad: function(){\r\n        this.action = 0;\r\n    },\r\n\r\n    onEnable: function () {//统一用onEnable初始化，重新激活时此函数也会调用\r\n        //所有小怪物节点下的脚本都引用 monsterData 数据\r\n        this.monsterData = this.getComponent('monsterData');\r\n\r\n\r\n        this.action++;\r\n       // console.log('action次数：' + this.action);\r\n\r\n\r\n        //计时器控制怪物的行动，一定时间改变一次行动状态，随着怪物的等级升高，会慢慢开启更高级的移动方式\r\n        this.monsterActionCallBack = function() {\r\n            //根据怪物等级决定行动状态范围\r\n            var actionRange = (allData.monsterLevel >= 6) ? 6 : allData.monsterLevel;\r\n            this.monsterAction(cc.random0To1() * actionRange, this.monsterData.actionChangeInterval);\r\n        }.bind(this);\r\n        this.schedule(this.monsterActionCallBack, this.monsterData.actionChangeInterval);\r\n    },\r\n\r\n    monsterAction: function(r, time) {\r\n        /*\r\n        怪物移动有下面5种方式：\r\n        初始怪物只有普通移动，随着怪物的等级升高，会慢慢开启更高级的移动方式，并带有额外效果\r\n        */\r\n        //1.普通移动，随机直线移动到一个地点\r\n        var moveBy = cc.moveBy(time, cc.randomMinus1To1() * this.node.parent.width, cc.randomMinus1To1() * this.node.parent.height);\r\n        //2.以贝塞尔曲线移动到随机的4个点                     \r\n        var bezier = [cc.p(cc.randomMinus1To1() * this.node.parent.width, cc.randomMinus1To1() * this.node.parent.height),\r\n                      cc.p(cc.randomMinus1To1() * this.node.parent.width, cc.randomMinus1To1() * this.node.parent.height),\r\n                      cc.p(cc.randomMinus1To1() * this.node.parent.width, cc.randomMinus1To1() * this.node.parent.height),\r\n                      cc.p(cc.randomMinus1To1() * this.node.parent.width, cc.randomMinus1To1() * this.node.parent.height)];\r\n        var bezierBy = cc.bezierBy(time, bezier);\r\n        //3.跳跃移动，跳到一个随机地点，高度跟monster节点高度相关，跳跃次数为怪物当前等级，（跳跃期间回血！回血效果跟怪物当前等级相关）\r\n        var jumpBy = cc.jumpBy(time, cc.randomMinus1To1() * this.node.parent.width, cc.randomMinus1To1() * this.node.parent.height, \r\n                               allData.random(2,3) * this.node.height, allData.monsterLevel);\r\n        //4.一定时间之内闪烁，闪烁次数跟怪物当前等级相关，（闪烁期间闪避攻击！）  \r\n        var blink = cc.blink(time, allData.monsterLevel * 2);\r\n        //5.一定时间之内旋转，旋转角度跟怪物当前等级相关（旋转期间反弹攻击！）\r\n        var rotateBy = cc.rotateBy(time, 180 * allData.monsterLevel);\r\n\r\n        //根据随机的数字决定怪物的移动方式，并标记怪物当前行动状态\r\n        if (r <= 1) {//1.普通移动\r\n            this.monsterData.actionStatus = 1;\r\n            return this.node.runAction(moveBy);\r\n        } else if(r <= 2){//2.贝塞尔曲线移动\r\n            this.monsterData.actionStatus = 2;\r\n            return this.node.runAction(bezierBy);\r\n        } else if(r <=3){//3.跳跃移动\r\n            this.monsterData.actionStatus = 3;\r\n            return this.node.runAction(jumpBy);\r\n        } else if(r <=4){//4.闪烁\r\n            this.monsterData.actionStatus = 4;\r\n            return this.node.getChildByName('monsterBody').runAction(blink);\r\n        } else {//5.旋转\r\n            this.monsterData.actionStatus = 5;\r\n            return this.node.getChildByName('monsterBody').runAction(rotateBy);\r\n        }\r\n    },\r\n\r\n    update: function (dt) {\r\n        //怪物4级以前不能穿墙,(杀到30怪的时候就可以穿墙了)\r\n        if(allData.monsterLevel < 4){\r\n            allData.unThroughWalls(this.node, this.node.parent);\r\n        } else {\r\n            allData.throughWalls(this.node, this.node.parent);\r\n        }\r\n    },\r\n\r\n    onDisable: function(){\r\n        \r\n\r\n    },\r\n\r\n    \r\n});\r\n"
  ]
}