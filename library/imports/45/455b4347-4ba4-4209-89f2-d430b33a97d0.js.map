{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [],
  "mappings": "AAAA,IAAI,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;;;AAGjC,EAAE,CAAC,KAAK,CAAC;AACL,eAAS,EAAE,CAAC,SAAS;;AAErB,YAAQ,EAAE,oBAAY;;;AAElB,YAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;;;AAI9C,YAAI,CAAC,QAAQ,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,YAAY,EAAE,IAAI,IAAI,CAAC,QAAQ,CAAC,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,eAAe,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAA,AAAC,CAAC,CAAC;AAC3I,YAAI,CAAC,QAAQ,CAAC,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;;;AAG9C,YAAI,CAAC,gBAAgB,GAAG,CAAC,CAAC;KAG7B;;AAED,UAAM,EAAE,gBAAU,EAAE,EAAE;;;AAGlB,YAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,IAAI,CAAC,EAAC;;AAE5B,mBAAO,CAAC,cAAc,GAAG,CAAC,CAAC;AAC3B,mBAAO,CAAC,YAAY,GAAG,CAAC,CAAC;AACzB,gBAAI,CAAC,QAAQ,CAAC,KAAK,GAAG,CAAC,CAAC;AACxB,cAAE,CAAC,WAAW,CAAC,cAAc,EAAE,CAAC;AAChC,cAAE,CAAC,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;SACjC;;;AAGD,YAAI,CAAC,gBAAgB,IAAI,EAAE,CAAC;AAC5B,YAAG,IAAI,CAAC,gBAAgB,IAAI,CAAC,EAAC;AAC1B,gBAAI,CAAC,QAAQ,CAAC,SAAS,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;AACvE,gBAAI,CAAC,gBAAgB,GAAG,CAAC,CAAC;SAC7B;;;AAGD,YAAI,CAAC,QAAQ,CAAC,SAAS,GAAG,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;;AAE/F,YAAI,CAAC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,WAAW,CAAC,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;AACzH,YAAI,CAAC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,GAAI,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;KAEnJ;CACJ,CAAC,CAAC",
  "file": "unknown",
  "sourcesContent": [
    "var allData = require('allData');//引用所有公共数据\r\n//处理hero生命值的变化\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    onEnable: function () {//统一用onEnable初始化，重新激活时此函数也会调用\r\n        //所有hero节点下的脚本都引用 heroData 数据\r\n        this.heroData = this.getComponent('heroData');\r\n\r\n\r\n        //初始化hero血量，最大血量随着等级增加而变大，\r\n        this.heroData.maxHp = Math.floor(allData.randomNormal() * (this.heroData.maxHpInit + this.heroData.hpIncreaseRatio * this.heroData.level));\r\n        this.heroData.currentHp = this.heroData.maxHp;\r\n\r\n        //hero回血的计时器\r\n        this.heroRecoveyTimer = 1;\r\n        \r\n\r\n    },\r\n\r\n    update: function (dt) {\r\n \r\n        //hero空血时，游戏结束，重新加载初始场景\r\n        if(this.heroData.currentHp <= 0){\r\n            \r\n            allData.killMonsterNum = 0;\r\n            allData.monsterLevel = 1;\r\n            this.heroData.level = 1;\r\n            cc.audioEngine.stopAllEffects();\r\n            cc.director.loadScene('Game');\r\n        }\r\n\r\n        //hero回血计时\r\n        this.heroRecoveyTimer -= dt;\r\n        if(this.heroRecoveyTimer <= 0){\r\n            this.heroData.currentHp += this.heroData.recovey * this.heroData.level;\r\n            this.heroRecoveyTimer = 1;\r\n        }\r\n\r\n        //控制currentHp范围在[0，maxHp]之间\r\n        this.heroData.currentHp = allData.limitCurrentHp(this.heroData.currentHp, this.heroData.maxHp);\r\n        //血条长度，数值实时变化\r\n        this.node.getChildByName('heroHp').getComponent(cc.ProgressBar).progress = this.heroData.currentHp / this.heroData.maxHp;\r\n        this.node.getChildByName('heroHp').getChildByName('hpNum').getComponent(cc.Label).string = this.heroData.currentHp +  '/' + this.heroData.maxHp;\r\n\r\n    },\r\n});\r\n"
  ]
}